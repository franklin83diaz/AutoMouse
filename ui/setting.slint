import { VerticalBox, HorizontalBox, Button, GridBox, CheckBox, TextEdit, SpinBox, Palette, LineEdit  } from "std-widgets.slint";


export component Setting inherits Rectangle {
    property <color> primary_color: #1C1B1F;
    property <bool> PressKey: false;
    
    property <image> check: @image-url("icons/check_box_outline_blank_18dp_1C1B1F_FILL0_wght400_GRAD0_opsz20.png");

    in-out property <string> key_stop;
    in-out property <bool> repeat;
    in-out property <bool> auto_stop;
    in-out property <string> repeat_each;
    in-out property <string> auto_stop_clicks;
    
    callback set_repeat(bool);
    callback set_repeat_each(string);
    callback set_key_stop(string);
    callback set_auto_stop(bool);
    callback set_auto_stop_clicks(string);
 


    width: 400px;
    height: 160px;
    background: #f3f3f3;
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 5px;
    VerticalLayout {
        // HorizontalLayout {
        //     padding: 20px;
        //     alignment: LayoutAlignment.start;
        //     Text {
        //         text: "Repeat:";
        //         color: primary_color;
        //         font-size: 16px;
                
        //     }

        //     CheckBox {
        //         width: 25px;
        //         height: 20px;
        //         padding: 0px;
        //         checked <=> repeat;
        //         toggled => {
        //             set_repeat(repeat);
        //         }
        //     }

        //     Rectangle {
        //         width: 15px;
        //     }

        //     Text {
        //         text: "Each:";
        //         color: primary_color;
        //         font-size: 16px;
        //     }

        //     LineEdit {
        //         width: 50px;
        //         height: 20px;
        //         text <=> repeat_each;
        //         placeholder-text: "1";
        //         font-size: 16px;
        //         input-type: number;
        //         edited(text) => {
        //             set_repeat_each(text);
        //         }
        //     }
        // }

        HorizontalLayout {
            alignment: LayoutAlignment.start;
            padding-top: 20px; // Remove when enable repeat
            padding-left: 20px;
            padding-bottom: 20px;
            Text {
                text: "Key Stop:";
                color: primary_color;
                font-size: 16px;
            }

            Rectangle {
                width: 72px;
                height: 29px;
                forward-focus: my-key-handler;
                my-key-handler := FocusScope {
                    key-released(event) => {
                        debug(event);
                        if (event.modifiers.control) {
                            PressKey = false;
                            set_key_stop(event.text);
                        }
                        accept
                    }
                    focus-changed-event => {
                        PressKey = self.has-focus;

                    }
                }
                Rectangle {
                    y: 0px;
                    x: 0px;
                    width: 45px;
                    height: 29px;
                    Image {
                        y: 0px;
                        x: 0px;
                        height: 29px;
                        width: 45px;
                        source: @image-url("icons/keymod.png");

                        Text {
                            text: "Ctrl";
                            color: #888888;
                        }
                    }
                }

                Rectangle {
                    y: 0px;
                    x: 45px;
                    width: 28px;
                    height: 28px;
                    Image {
                        y: 0px;
                        x: 0px;
                        height: 28px;
                        width: 28px;
                        source: @image-url("icons/key.png");
                      
                    }

                    Text {
                        text: key_stop;
                        color: #888888;
                    }
                }
            }

            Text {
                visible: PressKey;
                text: "  Press the Control + Key...";
                color: #036ae0;
                font-size: 14px;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.start;
            padding-left: 20px;
            padding-bottom: 20px;
            Text {
                text: "Auto Stop:";
                color: primary_color;
                font-size: 16px;
            }

            CheckBox {
                width: 25px;
                height: 20px;
                padding: 0px;
                checked <=> auto_stop;
                toggled => {
                    set_auto_stop(auto_stop);
                }
            }

            Text {
                text: "  After:";
                color: primary_color;
                font-size: 16px;
            }

            LineEdit {
                width: 50px;
                height: 20px;
                text <=> auto_stop_clicks;
                placeholder-text: "1";
                font-size: 16px;
                input-type: number;
                edited(text) => {
                    set_auto_stop_clicks(auto_stop_clicks);
                }
            }

            Text {
                text: "Clicks";
                color: primary_color;
                font-size: 16px;
            }
        }
    }
}
